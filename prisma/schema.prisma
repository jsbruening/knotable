generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id                  String            @id @default(cuid())
    email               String            @unique
    displayName         String?
    avatarUrl           String?
    githubUsername      String?
    githubRepoUrl       String?
    currentBloomLevel   Int               @default(1)
    totalPoints         Int               @default(0)
    totalKudos          Int               @default(0)
    loginStreak         Int               @default(0)
    lastLoginAt         DateTime?
    isAdmin             Boolean           @default(false)
    onboardingCompleted Boolean           @default(false)
    createdAt           DateTime          @default(now())
    updatedAt           DateTime          @updatedAt
    createdCampaigns    Campaign[]        @relation("CampaignCreatedBy")
    receivedKudos       Kudo[]            @relation("KudosReceived")
    sentKudos           Kudo[]            @relation("KudosSent")
    notifications       Notification[]
    pointsLogs          PointsLog[]
    quizAttempts        QuizAttempt[]
    createdTeams        Team[]            @relation("TeamCreatedBy")
    teamChatMessages    TeamChatMessage[]
    badges              UserBadge[]
    campaigns           UserCampaign[]
    teams               UserTeam[]
    unlockables         UserUnlockable[]
    learningSessions    LearningSession[]

    @@index([email])
    @@index([totalPoints])
    @@index([totalKudos])
}

model Campaign {
    id                 String          @id @default(cuid())
    title              String
    description        String
    topic              String
    targetAudience     String?
    startingBloomLevel Int             @default(1)
    targetBloomLevel   Int             @default(6)
    focusAreas         String[]
    resourceTypes      String[]
    excludedSources    String[]
    tone               String?
    estimatedDuration  Int?
    challengeType      String?
    teamChallengeIdeas String?
    isActive           Boolean         @default(true)
    isPublic           Boolean         @default(true)
    createdById        String
    createdAt          DateTime        @default(now())
    updatedAt          DateTime        @updatedAt
    isDraft            Boolean         @default(false)
    teamId             String?
    createdBy          User            @relation("CampaignCreatedBy", fields: [createdById], references: [id])
    team               Team?           @relation("TeamCampaigns", fields: [teamId], references: [id])
    milestones         Milestone[]
    teamChallenges     TeamChallenge[]
    users              UserCampaign[]
    learningSessions   LearningSession[]

    @@index([isActive])
    @@index([isPublic])
    @@index([isDraft])
    @@index([teamId])
    @@index([createdById])
}

model UserCampaign {
    id                  String   @id @default(cuid())
    userId              String
    campaignId          String
    currentMilestone    Int      @default(1)
    completedMilestones Int[]    @default([])
    joinedAt            DateTime @default(now())
    lastActiveAt        DateTime @default(now())
    campaign            Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, campaignId])
    @@index([userId])
    @@index([campaignId])
}

model Milestone {
    id                String          @id @default(cuid())
    campaignId        String
    bloomLevel        Int
    title             String
    objective         String
    externalResources String[]
    isActive          Boolean         @default(true)
    order             Int
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt
    campaign          Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    subMilestones     SubMilestone[]
    quizzes           Quiz[]
    teamChallenges    TeamChallenge[]
    learningSessions  LearningSession[]

    @@index([campaignId])
    @@index([bloomLevel])
}

model SubMilestone {
    id                String    @id @default(cuid())
    milestoneId       String
    title             String
    objective         String
    externalResources String[]
    estimatedTime     String?
    isActive          Boolean   @default(true)
    order             Int
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    milestone         Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
    quizzes           Quiz[]

    @@index([milestoneId])
    @@index([order])
}

model Quiz {
    id             String        @id @default(cuid())
    milestoneId    String?
    subMilestoneId String?
    title          String
    questions      Json
    passingScore   Int           @default(70)
    timeLimit      Int?
    isActive       Boolean       @default(true)
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    milestone      Milestone?    @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
    subMilestone   SubMilestone? @relation(fields: [subMilestoneId], references: [id], onDelete: Cascade)
    attempts       QuizAttempt[]

    @@index([milestoneId])
    @@index([subMilestoneId])
}

model QuizAttempt {
    id          String   @id @default(cuid())
    userId      String
    quizId      String
    score       Int
    answers     Json
    timeSpent   Int?
    passed      Boolean
    attemptedAt DateTime @default(now())
    quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([quizId])
    @@index([attemptedAt])
}

model Team {
    id           String            @id @default(cuid())
    name         String
    description  String?
    bannerUrl    String?
    isPublic     Boolean           @default(true)
    maxMembers   Int               @default(10)
    createdById  String
    createdAt    DateTime          @default(now())
    updatedAt    DateTime          @updatedAt
    campaigns    Campaign[]        @relation("TeamCampaigns")
    createdBy    User              @relation("TeamCreatedBy", fields: [createdById], references: [id])
    challenges   TeamChallenge[]
    chatMessages TeamChatMessage[]
    members      UserTeam[]

    @@index([isPublic])
    @@index([createdById])
}

model UserTeam {
    id           String   @id @default(cuid())
    userId       String
    teamId       String
    role         String   @default("member")
    joinedAt     DateTime @default(now())
    lastActiveAt DateTime @default(now())
    team         Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, teamId])
    @@index([userId])
    @@index([teamId])
}

model TeamChallenge {
    id           String     @id @default(cuid())
    teamId       String
    campaignId   String?
    milestoneId  String?
    title        String
    description  String
    pointsReward Int        @default(100)
    isActive     Boolean    @default(true)
    startDate    DateTime?
    endDate      DateTime?
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    campaign     Campaign?  @relation(fields: [campaignId], references: [id])
    milestone    Milestone? @relation(fields: [milestoneId], references: [id])
    team         Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)

    @@index([teamId])
    @@index([campaignId])
}

model TeamChatMessage {
    id          String   @id @default(cuid())
    teamId      String
    userId      String
    content     String
    messageType String   @default("text")
    metadata    Json?
    createdAt   DateTime @default(now())
    team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([teamId])
    @@index([userId])
    @@index([createdAt])
}

model Kudo {
    id         String   @id @default(cuid())
    senderId   String
    receiverId String
    type       String
    reason     String
    points     Int      @default(10)
    createdAt  DateTime @default(now())
    receiver   User     @relation("KudosReceived", fields: [receiverId], references: [id], onDelete: Cascade)
    sender     User     @relation("KudosSent", fields: [senderId], references: [id], onDelete: Cascade)

    @@index([senderId])
    @@index([receiverId])
    @@index([createdAt])
}

model Badge {
    id             String      @id @default(cuid())
    name           String      @unique
    description    String
    iconUrl        String?
    category       String
    rarity         String      @default("common")
    pointsRequired Int         @default(0)
    isActive       Boolean     @default(true)
    createdAt      DateTime    @default(now())
    users          UserBadge[]

    @@index([category])
    @@index([rarity])
}

model UserBadge {
    id       String   @id @default(cuid())
    userId   String
    badgeId  String
    earnedAt DateTime @default(now())
    metadata Json?
    badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, badgeId])
    @@index([userId])
    @@index([badgeId])
}

model Unlockable {
    id             String           @id @default(cuid())
    name           String
    description    String
    type           String
    pointsRequired Int
    rarity         String           @default("common")
    metadata       Json?
    isActive       Boolean          @default(true)
    createdAt      DateTime         @default(now())
    users          UserUnlockable[]

    @@index([type])
    @@index([rarity])
    @@index([pointsRequired])
}

model UserUnlockable {
    id           String     @id @default(cuid())
    userId       String
    unlockableId String
    unlockedAt   DateTime   @default(now())
    isActive     Boolean    @default(true)
    unlockable   Unlockable @relation(fields: [unlockableId], references: [id], onDelete: Cascade)
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, unlockableId])
    @@index([userId])
    @@index([unlockableId])
}

model PointsLog {
    id        String   @id @default(cuid())
    userId    String
    points    Int
    reason    String
    metadata  Json?
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([createdAt])
}

model Notification {
    id        String   @id @default(cuid())
    userId    String
    type      String
    title     String
    message   String
    isRead    Boolean  @default(false)
    metadata  Json?
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([isRead])
    @@index([createdAt])
}

model LearningSession {
    id                String    @id @default(cuid())
    userId            String
    campaignId        String
    milestoneId       String
    startedAt         DateTime  @default(now())
    completedAt       DateTime?
    timeSpent         Int       @default(0) // in minutes
    progress          Float     @default(0) // 0-100%
    isActive          Boolean   @default(true)
    completedResources String[] @default([]) // Track completed resource URLs
    resourceProgress  Json?     // Detailed progress per resource
    
    user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    campaign          Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    milestone         Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
    resourceProgresses ResourceProgress[]
    
    @@unique([userId, campaignId, milestoneId])
    @@index([userId])
    @@index([campaignId])
    @@index([milestoneId])
    @@index([isActive])
    @@index([startedAt])
}

model ResourceProgress {
    id           String          @id @default(cuid())
    sessionId    String
    resourceUrl  String
    resourceType String?         // video, article, tool, etc.
    startedAt    DateTime        @default(now())
    completedAt  DateTime?
    timeSpent    Int             @default(0) // in minutes
    progress     Float           @default(0) // 0-100%
    isCompleted  Boolean         @default(false)
    
    session      LearningSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    
    @@unique([sessionId, resourceUrl])
    @@index([sessionId])
    @@index([resourceUrl])
    @@index([isCompleted])
}
